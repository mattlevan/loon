:-  :~  title+'Nock 4: Increment'
        author+'Matthew Levan ~mastyr-bottec matt.s.levan@gmail.com'
        navhome+'/loon/'
        sort+16
        next+&
    ==
;>

# Hoon to Nock

## Nock 4: Increment

Another easy one: Nock 4 is the instruction for incrementing by 1. 

### Definition

```
*[a 4 b]  +*[a b]

+a        1 + a
+[a b]    +[a b]  ::  crash
```

### `.+` and `+(x)`

Remember, all `.` ("dot") runes call Nock.  `.+` and `+(x)` both call Nock 4, 
the increment operator. See if both expressions compile to the same Nock using 
the `!=` rune.

```
!=  .+  42
```
vs.
```
!=  +(42)
```

;=
  ;div
    ;link/"/repl/main.css"(rel "stylesheet");
    ;script@"/repl/main.js";
    ;repl;
    ;pre.result;
  ==
==

### Exercise

Evaluate the following by hand, step-by-step, and see if your resulting Nock is 
equivalent with the result from passing it to `!=`.

```
.+  +2:[42 43 44]
```

### Solution

```
[4 7 [1 42 43 44] 0 2]
```

> Note: Before the Nock 7 from the previous exercise's solution is evaluated 
  into a Nock 2 operation, what is the subject for the formula to be evaluated 
  agaist? Where does it come from? Since we have not explicitly defined a 
  subject as we would in teh first argument of a `.*` rune call, our Hoon 
  "environment" uses our "default" subject instead. There is technically no 
  environment in Hoon-- just a subject, which is why quotes are used there. 
  The default subject is rendered irrelevant for this expression after the 
  first step of the evaluation of the Nock 2 which was produced from evaluation 
  of the Nock 7.
