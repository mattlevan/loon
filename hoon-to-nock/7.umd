:-  :~  title+'Nock 7: Compose'
        author+'Matthew Levan ~mastyr-bottec matt.s.levan@gmail.com'
        navhome+'/loon/'
        sort+15
        next+&
    ==
;>

# Hoon to Nock

## Nock 7: Compose

Nock 7 is Nock 2 with more convenience. In Nock 2, the programmer is required 
to explicitly produce the formula `c` using the constant function or other so 
Nock knows we want to use it as a formula. Recall the definition of Nock 2 and 
contrast it with the definition of Nock 7.

Here's Nock 2:
```
*[a 2 b c]  *[*[a b] *[a c]]
```

### Definition

Here's Nock 7:
```
*[a 7 b c]  *[a 2 b 1 c]
```

It simply adds the constant function to the tail! Nock 7 is used to compose 
Nock formulae.

### `=>` "tisgar"

Along with Nock 7, we will introduce the `=>` ("tisgar") rune, which is used 
to compose two expressions. Read
```
=>  x  y
```

as "with `x` as subject, evaluate `y`." 

### Examples of `=>` with `!=`

```
!=  =>  [42 43 44]  .
```
Notice how the compiler cleverly reduces this expression to a simple Nock 1 
formula. What happens when we change `.` (the entire subject) to `-` (the head 
of the subject)? 

```
!=  =>  [42 43 44]  -
```

We can explore the produced Nock with any of our tree 
addressing syntax. Try `+2:.`,  `&2:.`, etc.

### Exercise

Write the equivalent Nock of the previous example using only `.*` with Nock 
operators 2, 1, and 0. Try it again with only Nock 7 and 0.

;=
  ;div
    ;link/"/repl/main.css"(rel "stylesheet");
    ;script@"/repl/main.js";
    ;repl;
    ;pre.result;
    ;pre.solution(hidden "yes"): 42
  ==
==

