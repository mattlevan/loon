:-  :~  title+'Lark Syntax'
        author+'Matthew Levan ~mastyr-bottec matt.s.levan@gmail.com'
        navhome+'/loon/'
        sort+3
        next+&
    ==
;>

# Cell Addressing

## Lark Syntax

Lark syntax isn't as straight-forward as numeric indexing, but it is actually 
less weird when it is understood. Lark syntax is as follows, given `x` is some 
cell:

- `.:x` gets the root of the tree and is equivalent to `+1:x`
- `-:x` gets the head of the tree and is equivalent to `+2:x`
- `+:x` gets the tail of the tree and is equivalent to `+3:x`
- `+<:x` gets the left child of the tail of the tree
- `+>:x` gets the right child of the tail of the tree

### Exercise

After playing with lark syntax, use lark syntax to retrieve `45` from 
`[42 43 44 45]`.

;=
  ;div
    ;link/"/repl/main.css"(rel "stylesheet");
    ;script@"/repl/main.js";
    ;repl;
    ;pre.result;
    ;pre.solution(hidden "yes"): 45
  ==
==
