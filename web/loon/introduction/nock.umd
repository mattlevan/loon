:-  :~  title+'Nock'
        author+'Matthew Levan ~mastyr-bottec matt.s.levan@gmail.com'
        navhome+'/loon/'
        sort+2
        next+&
    ==
;>

# Introduction

## Nock

### Definition

The Nock VM is a Turing-complete function that maps a cell
`{subject formula}` to a noun `product`, where `subject` is the
data, `formula` is the code, and `product` is the result.

To program in Hoon, this is all you need to know about Nock.
It's probably at least worth skimming the definition, though.

(Also, the Hoon programmer should know that (a) tail call
elimination in Nock is straightforward; and (b) tail calls in
Hoon always become tail calls in Nock.)

### Rules

Nock is a combinator interpreter defined by the spec below.

This pseudocode (any system of axioms is properly defined in
pseudocode) is a system of problem reduction rules.  Variables
match any noun; the first rule from the top matches.

A problem that reduces to itself is an infinite loop, hence a
crash ("bottom" in formal logic).  Obviously a real interpreter
can detect this crash and produce an out-of-band value instead.

The specification is as follows, though we will introduce and explore them 
more thoroughly throughout the next chapter:

```
?[a b]           0
?a               1
+[a b]           +[a b]
+a               1 + a
=[a a]           0
=[a b]           1
=a               =a

/[1 a]           a
/[2 a b]         a
/[3 a b]         b
/[(a + a) b]     /[2 /[a b]]
/[(a + a + 1) b] /[3 /[a b]]
/a               /a

*[a [b c] d]     [*[a b c] *[a d]]

*[a 0 b]         /[b a]
*[a 1 b]         b
*[a 2 b c]       *[*[a b] *[a c]]
*[a 3 b]         ?*[a b]
*[a 4 b]         +*[a b]
*[a 5 b]         =*[a b]

*[a 6 b c d]     *[a 2 [0 1] 2 [1 c d] [1 0]
                   2 [1 2 3] [1 0] 4 4 b]
*[a 7 b c]       *[a 2 b 1 c]
*[a 8 b c]       *[a 7 [[7 [0 1] b] 0 1] c]
*[a 9 b c]       *[a 7 c 2 [0 1] 0 b]
*[a 10 [b c] d]  *[a 8 c 7 [0 3] d]
*[a 10 b c]      *[a c]

*a               *a
```

